let express,User,jwt,tokensValidos,getCurrentUser,verificarToken;_e62‍.x([["default",()=>_e62‍.o]]);_e62‍.w("express",[["default",["express"],function(v){express=v}]]);_e62‍.w("../models/user.js",[["default",["User"],function(v){User=v}]]);_e62‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_e62‍.w("./tablas.js",[["tokensValidos",["tokensValidos"],function(v){tokensValidos=v}],["verificarToken",["verificarToken"],function(v){verificarToken=v}]]);_e62‍.w("../helpers/getCurrentUser.js",[["default",["getCurrentUser"],function(v){getCurrentUser=v}]]);







const router = express.Router();

router.get("/usuarios/corriente", async (req, res) => {
    const cookie = req.cookies["jwt"];
    if (!cookie) {
        res.json({ success: false, message: "acceso denegado" });
        return;
    }

    try {
        const currentUser = await verificarToken(cookie, 'miFirma');
        _e62‍.g.console.log("currentUser", currentUser);
        res.render("Usuarios/register", { user: { name: currentUser.name } });
    } catch (error) {
        _e62‍.g.console.error('Error:', error);
        res.json({ success: false, message: "acceso denegado" });
    }
});

router.get("/profile/:username", (req, res) => {
    res.render("Usuarios/profile");
});

router.get("/usuarios/crear", (req, res) => {
    res.render("Usuarios/register",{
        style : 'styleregister.css'
    });
});

router.post("/usuarios/crear" , async (req, res) => {
    _e62‍.g.console.log("data", req.body);
    const veriUsuario = await User.findOne({ Rut: req.body.Rut });
    if(!veriUsuario){
        User.create(req.body);
        res.json({
        "success": true,
        "message": "ya existe este usuario"
        });
    }
    res.json({
        "success": false,
        "message": "ya existe este usuario"
    });
});

router.get("/usuarios/ingresar", (req, res) => {
    res.render("usuarios/login",{
        style: 'styleLogin.css'
    });
});

router.post("/usuarios/ingresar", async (req, res) => {
  const currentUser = await User.findOne({ Rut: req.body.Rut });
  if(!currentUser || currentUser.password !== req.body.password){
    res.json({success: false, message: "usuario o contraseña incorrecta"});
    return;
  }
  const payload = currentUser["_doc"]
  delete payload.password;

  const signedJWT = jwt.sign(payload, "miFirma", {expiresIn: "1h"});
  tokensValidos.push(signedJWT);
res.json({success: true, jwt: signedJWT})
  //res.cookie("jwt", signedJWT).redirect("/crearvotacion");
});

_e62‍.d(router);
